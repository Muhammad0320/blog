`
  Na'am next time when you're trying to teach me something, please just go for the "more modern and robost" approach
  Now, I have a hunch that the there's something wrong with either the ts config file or my own folder structure - 
  because when my include was "include: ["src"]". I see this error: src/data/controller/post.controllers.ts:76:26 - error TS2339: Property 'postId' does not exist on type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.

76       const postId = req.postId as number;
  But when I did something like this: "include: ["src/**/*"]" I saw a different error instead: TSError: тип Unable to compile TypeScript:
src/data/middleware/validation.middleware.ts:23:7 - error TS2339: Property 'postId' does not exist on type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.

23   req.postId = id;

And I thought nodemon restarts the terminal whenever I save any, but not it doesn't do anything unless it's the tsconfig file.

I really don't know what's happening.
The summary: I don't think ts compiler saw the changes in my express.d.ts file, because I gives me the same error when I did global declaration, though no error appears in the ide (it doesn't have to)
so take your time to really see what's happeing
`


`
  Allihamdullilah, That tiny --files flag, just fixed it! why have been hiding the solution to the problem since? 

  But when I ran this: /api/v1/posts/1/comments, something interesting happens, the response was 
`

`
  Allihamdullilah, here they are, once again: 
      static async update({
    content,
    id,
  }: {
    id: number;
    content: string;
  }): Promise<Number> {
    const sql = `UPDATE comments SET content = ? WHERE id = ?`;

    try {
      const [results] = await pool.query<ResultSetHeader>(sql, [content, id]);
      return results.affectedRows;
    } catch (error) {
      console.error("Error updating post", error);
      throw new Error("Cannot update post");
    }
  } // The model

   static async handleUpdate(req: Request, res: Response) {
    try {
      const id = req.commentId as number;
      const { content } = req.body;

      if (!content) {
        res.status(400).json({ message: "The 'content' field is required " });
        return;
      }

      const affectedRow = await CommentModel.update({ id, content });

      if (affectedRow) {
        res.status(200).json({ message: "comment successfully updated" });
      } else {
        res.status(404).json({ message: "comment not found" });
      }
    } catch (error) {
      console.error("Could not update comment", error);
      throw new Error("Error updating comment");
    }
  } // The controller 

 commentRouter.patch(
  "/comments/:commentId",
  validateCommentId,
  CommentController.handleUpdate
); // The router. 

Allihamdullilah, another model is done!
`


`
interface User extends RowDataPacket {
    id: number
    username: string
    email: string,
    password: string,
    created_at: Date
}
Again be very critical with it. 
`